<?php

namespace Bitcoin\AdminBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ProductCategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductCategoryRepository extends EntityRepository {

    public function getAllCategoryList($searchs = array(), $sort = array(), $from = 0, $num_result = 10) {
        $categories = $this->findAll();
        $allCategories = array(); //(0=>'Select ');
        if (count($categories) > 0) {
            foreach ($categories as $category) {
                $allCategories[] = array(
                    'id' => $category->getId(),
                    'categoryName' => $category->getCategoryName()
                );
            }
        }
        return $allCategories;
    }

    public function getAllCategories($searchs = array(), $sorter = array(), $offset = 0, $limit = 10, $arrayResult = true) {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('pc, pcp')
                ->from($this->_entityName, 'pc')
                ->leftJoin('pc.fkParent', 'pcp')
                //  ->leftJoin('pc.child', 'pch')
                ;


        if (!empty($sorter)) {
            foreach ($sorter as $sort) {
                $qb->orderBy('pc.' . $sort[0] , $sort[1]);
                //$qb->add('orderBy', 'pc.' . $sort[0] . ' ' . $sort[1]);
            }
        }

        if (!empty($searchs)) {
            if (isset($searchs['categoryName']) && !empty($searchs['categoryName'])) {
                //$qb->where('pc.categoryName LIKE ? cat');
                $qb->add('where', 'pc.categoryName LIKE :cat')
                        ->setParameter('cat', '%' . $searchs['categoryName'] . '%');
            }
            if (isset($searchs['fkParent']) && $searchs['fkParent'] === 0) {
                $qb->andWhere('pc.fkParent is NULL');
            } else if (isset($searchs['fkParent']) && $searchs['fkParent'] === NULL) {
                $qb->andWhere('pc.fkParent = :fkParent')
                        ->setParameter('fkParent', $searchs['fkParent']);
            }
        }
        
        //Pagination logic
        $from = (int) $offset;
        $start = ($from == 1) ? ($from - 1) : (($from - 1) * $limit );
        $start = ($start < 0) ? 0 : $start;
        $qb->setFirstResult($start);
        $qb->setMaxResults($limit);
        
       //echo $qb->getQuery()->getSQL();die;
        if (TRUE === $arrayResult) {
            return $qb->getQuery()->getArrayResult();
        }
        return $qb->getQuery()->getResult();
    }

    public function totalCount() {
        try {
            $qb = $this->_em->createQueryBuilder();
            $qb->select('count(p.id)');
            $qb->from($this->getEntityName(), 'p');

            return $qb->getQuery()->getSingleScalarResult();
        } catch (Exception $e) {
            return FALSE;
        }
    }

}
