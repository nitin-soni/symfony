<?php

namespace Bitcoin\AdminBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends EntityRepository {

    public function getAllProduct($searchs = array(), $sorter = array(), $offset = 0, $limit = 10, $arrayResult = true) {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('p, pc')
                ->from($this->_entityName, 'p')
                ->leftJoin('p.fkProductCat', 'pc');


        if (!empty($sorter)) {
            foreach ($sorter as $sort) {
                $qb->add('orderBy', 'p.' . $sort[0] . ' ' . $sort[1]);
            }
        }

        if (!empty($searchs)) {
            $count = 1;
            foreach ($searchs as $field => $val) {
                $qb->add('where', 'p.' . $field . ' LIKE ?' . $count)
                        ->setParameter($count, '%' . $val . '%');
                $count++;
            }
        }
        
        //Pagination logic
        $from = (int) $offset;
        $start = ($from == 1) ? ($from - 1) : (($from - 1) * $limit );
        $start = ($start < 0) ? 0 : $start;
        $qb->setFirstResult($start);
        $qb->setMaxResults($limit);
        
        if (TRUE === $arrayResult) {
            return $qb->getQuery()->getArrayResult();
        }
        return $qb->getQuery()->getResult();
    }

    public function totalCount() {
        try {
            $qb = $this->_em->createQueryBuilder();
            $qb->select('count(p.id)');
            $qb->from($this->getEntityName(), 'p');

            return $qb->getQuery()->getSingleScalarResult();
        } catch (Exception $e) {
            return FALSE;
        }
    }

}
