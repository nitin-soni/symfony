<?php

namespace Bitcoin\AdminBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ProductReviewRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductReviewRepository extends EntityRepository {

    public function getAll($searchs = array(), $sorter = array(), $offset = 0, $limit = 10, $arrayResult = true) {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('pr, p')
                ->from($this->_entityName, 'pr')
                ->leftJoin('pr.fkProduct', 'p')
        //->leftJoin('pc.child', 'pch')
        ;


        if (!empty($sorter)) {
            foreach ($sorter as $sort) {
                $qb->orderBy('pr.' . $sort[0], $sort[1]);
                //$qb->add('orderBy', 'pc.' . $sort[0] . ' ' . $sort[1]);
            }
        }

        if (!empty($searchs)) {
            if (isset($searchs['categoryName']) && !empty($searchs['categoryName'])) {
                //$qb->where('pc.categoryName LIKE ? cat');
                $qb->add('where', 'pr.categoryName LIKE :cat')
                        ->setParameter('cat', '%' . $searchs['categoryName'] . '%');
            }
            if (isset($searchs['fkParent']) && $searchs['fkParent'] === 0) {
                $qb->andWhere('pr.fkParent is NULL');
            } else if (isset($searchs['fkParent']) && $searchs['fkParent'] === NULL) {
                $qb->andWhere('pr.fkParent = :fkParent')
                        ->setParameter('fkParent', $searchs['fkParent']);
            }
        }

        //Pagination logic
        $from = (int) $offset;
        $start = ($from == 1) ? ($from - 1) : (($from - 1) * $limit );
        $start = ($start < 0) ? 0 : $start;
        $qb->setFirstResult($start);
        $qb->setMaxResults($limit);

        if (TRUE === $arrayResult) {
            return $qb->getQuery()->getArrayResult();
        }
        $paginator = new Paginator($qb->getQuery(), true);
        return $qb->getQuery()->getResult();
    }

    public function totalCount() {
        try {
            $qb = $this->_em->createQueryBuilder();
            $qb->select('count(p.id)');
            $qb->from($this->getEntityName(), 'p');

            return $qb->getQuery()->getSingleScalarResult();
        } catch (Exception $e) {
            return FALSE;
        }
    }

}
